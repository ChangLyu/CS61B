package homework4;

public class LockDList extends DList{

	public void lockNode(LockDListNode node) { 
		node.locked =true;
	}
	  protected LockDListNode newNode(Object item, DListNode prev, DListNode next) {
		    return new LockDListNode(item, prev, next);
		  }


		  public LockDList() {
			  LockDListNode sentinel=newNode(null,null,null);
			  sentinel.prev=sentinel;
			  sentinel.next=sentinel;
			  this.head=sentinel;
			  this.size=0;
		  }

		  /**
		   *  isEmpty() returns true if this DList is empty, false otherwise.
		   *  @return true if this DList is empty, false otherwise. 
		   *  Performance:  runs in O(1) time.
		   */
		  public boolean isEmpty() {
		    if(size == 0){
		    	return true;
		    }else{
		    	return false;
		    }
		  }

		  /** 
		   *  length() returns the length of this DList. 
		   *  @return the length of this DList.
		   *  Performance:  runs in O(1) time.
		   */
		  public int length() {
		    return size;
		  }

		  /**
		   *  insertFront() inserts an item at the front of this DList.
		   *  @param item is the item to be inserted.
		   *  Performance:  runs in O(1) time.
		   */
		  public void insertFront(Object item) {
				  this.head.next=newNode(item,this.head,this.head.next);
				  this.head.next.next.prev=this.head.next;
				  this.size++;
			 
		    // Your solution here.
		  }

		  /**
		   *  insertBack() inserts an item at the back of this DList.
		   *  @param item is the item to be inserted.
		   *  Performance:  runs in O(1) time.
		   */
		  public void insertBack(Object item) {
			  this.head.prev=newNode(item,this.head.prev,this.head);
			  this.head.prev.prev.next=this.head.prev;
			  this.size++;
		    // Your solution here.
		  }

		  /**
		   *  front() returns the node at the front of this DList.  If the DList is
		   *  empty, return null.
		   *
		   *  Do NOT return the sentinel under any circumstances!
		   *
		   *  @return the node at the front of this DList.
		   *  Performance:  runs in O(1) time.
		   */
		  public DListNode front() {
			  if(this.size==0){ 
				  return null;
				  }else{
					  return this.head.next;
				  }
		    // Your solution here.
		  }

		  /**
		   *  back() returns the node at the back of this DList.  If the DList is
		   *  empty, return null.
		   *
		   *  Do NOT return the sentinel under any circumstances!
		   *
		   *  @return the node at the back of this DList.
		   *  Performance:  runs in O(1) time.
		   */
		  public DListNode back() {
			  if(this.size==0){ 
				  return null;
				  }else{
					  return this.head.prev;
				  }
			  
		    // Your solution here.
		  }

		  /**
		   *  next() returns the node following "node" in this DList.  If "node" is
		   *  null, or "node" is the last node in this DList, return null.
		   *
		   *  Do NOT return the sentinel under any circumstances!
		   *
		   *  @param node the node whose successor is sought.
		   *  @return the node following "node".
		   *  Performance:  runs in O(1) time.
		   */
		  public DListNode next(DListNode node) {
			  if(node==null||node.next==head){
				  return null;
			  }else{
				  return node.next;
				  }
		    // Your solution here.
		  }

		  /**
		   *  prev() returns the node prior to "node" in this DList.  If "node" is
		   *  null, or "node" is the first node in this DList, return null.
		   *
		   *  Do NOT return the sentinel under any circumstances!
		   *
		   *  @param node the node whose predecessor is sought.
		   *  @return the node prior to "node".
		   *  Performance:  runs in O(1) time.
		   */
		  public DListNode prev(DListNode node) {
			  if(node==null||node.prev==head){
				  return null;
			  }else{
				  return node.prev;
				  }

		    // Your solution here.
		  }

		  /**
		   *  insertAfter() inserts an item in this DList immediately following "node".
		   *  If "node" is null, do nothing.
		   *  @param item the item to be inserted.
		   *  @param node the node to insert the item after.
		   *  Performance:  runs in O(1) time.
		   */
		  public void insertAfter(Object item, DListNode node) {
			  if(node==null){
				  return;
			  }else{
				  node.next=newNode(item,node,node.next);
				  node.next.next.prev=node.next;
				  this.size++;
			  }
			  
		    // Your solution here.
		  }

		  /**
		   *  insertBefore() inserts an item in this DList immediately before "node".
		   *  If "node" is null, do nothing.
		   *  @param item the item to be inserted.
		   *  @param node the node to insert the item before.
		   *  Performance:  runs in O(1) time.
		   */
		  public void insertBefore(Object item, DListNode node) {
			  if(node==null){
				  return;
			  }else{
				  node.prev=newNode(item,node.prev,node);
				  node.prev.prev.next=node.prev;
				  this.size++;
			  }
		    // Your solution here.
		  }

		  /**
		   *  remove() removes "node" from this DList.  If "node" is null, do nothing.
		   *  Performance:  runs in O(1) time.
		   */
		  public void remove(DListNode node) {
			  if(node==null||node==head){
				  return;
			  }else{
				  node.next.prev=node.prev;
				  node.prev.next=node.next;
				  this.size--;
			  }
		    // Your solution here.
		  }

		  /**
		   *  toString() returns a String representation of this DList.
		   *
		   *  DO NOT CHANGE THIS METHOD.
		   *
		   *  @return a String representation of this DList.
		   *  Performance:  runs in O(n) time, where n is the length of the list.
		   */
		  public String toString() {
		    String result = "[  ";
		    DListNode current = head.next;
		    while (current != head) {
		      result = result + current.item + "  ";
		      current = current.next;
		    }
		    return result + "]";
		  }
}
